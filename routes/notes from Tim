you start with:
express => routes => respond
but if you want to protect some endpoints,
the flow becomes:
1) express => authenticated? => protected => respond
        /userpage
        /userreport
2) express => unprotected => respond
        /login
        /signup
        /         (root)   `GET /`
JS: language
Node: JS runtime
Express: framework that processes http requests (req <=> res)
Passport: framework for authentication
    - passport has many "strategies"
    - JWT, local, etc...
Chai/Mocha: testing
How does FE communciate with BE and diplay data?
FE load some route => make request to BE => BE respond with data => FE renders it
/login page => user fills out login form => user submit the form => send form data (container UserName and PWD) to BE => authenticated? (correct credentials?) => respond with token (good credentials) / respond error message (bad credentials)
respond with token => persist the token in 'localStorage' (localStorage persist its content across sessions and routes within the same domain) => route the user to /userpage => userpage is set up so that it reads the token from the storage (if token doesn't exist, route to /login) => makes a `GET /userpage` to BE, this call contains the token in the header. ({ headers: { Authorization: 'JWT TOKEN_GOES_HEREA'}}) => server processes request, tries to authenticate => respond with userpage's content (good token) / respond error message (bad token)
How does passport work?
    - passport is for auth
    - passport is a middleware for express
    - psssport itself uses a middleware design
        - IMPORTANT!
        - we need to "register" middlwares aka. strategies
        - strategies for passport == middlewares for passport
        - syntax:   passport.use(xStrategy); passport.use(YStrategy); passport.use(localStrategy); passport.use(JWTStrategy)
How do we set up passport?
    1. create some strategies
        - strategies.js:
        - syntax :
            const LocalStrategy = new LocalStrategy(
                  function(username, password, done) {
                    ...
                  }
                )
    2. export all auth strategies
        - strategies.js:
        - syntax:   module.exports = { LocalStrategy, JWTStrategy }
    3. register these strategies
        - at the very top of app.js:
        - syntax:
            passport.use(LocalStrategy)
    4. allow anyone to access unprotected endpoints
        - /    (root)
        - `GET localhost:8080/`
        - server.js:
        - router.get('/', (res, res) => {
            res.json({ status: 200, message: 'welcome!!!'})
        })
    5. allow creation of new user accounts
        - POST localhost:8080/user, data: { emailAddress, password, dateOfConcussion}
        - router.post('/user', (req, res) => {
            User.create({ ... })
        })
    6. allow users to auth and get token back
        - POST localhost:8080/auth, data { emailAddress, password }
        - router.post(
            '/auth',
            // JWT middlawre does is: it sets the req.user
            passport.authenticate('jwt', { session: false })
            (req, res) => {
                res.json({ req.user })
            }
        )
    7. once the user has the token, allow them through protected endpoints
        - POST localhost:8080/userpage, data { token }
        - router.post(
            '/userpage',
            authenticate,
            (req, res) => {
                /* User {
                    id
                    date
                    password
                    ...
                    symptoms
                    painLevel
                } */
                const user = req.user
                res.json({
                    symptoms: user.symptoms,
                    painLevel: user.painLevel,
                    ...
                })
            }
        )
